var validator=require("validator"),async=require("async"),sha1=require("sha1"),xml=require("xml"),xml2js=require("xml2js"),ip=require("ip"),utilities=require("extra-utilities"),envelope=require("node-envelope"),freeDNS={},apiAddress="https://freedns.afraid.org",interface="xml",apiKey=null;function getValue(data){return utilities.isNonEmptyArray(data)?data[0]:data}function getToken(data){var value=freeDNS.getValue(data);if(utilities.isEmptyString(value))return null;var parts=value.match(/[^?]+/g);return utilities.isEmptyArray(parts)||2!==parts.length?null:parts[1]}function formatResult(data){return"string"!=typeof data?null:data.replace(/[\r\n]+$/,"")}function isError(data){var formattedData=formatResult(data);return null===formattedData?null:!!formattedData.match(/^error/gi)}function formatIPV4Address(ipAddress,throwErrors){if("string"!=typeof ipAddress){if(throwErrors)throw new Error("IP address must be a string!");return null}var formattedIPAddress=ipAddress.trim();if(0===formattedIPAddress.length){if(throwErrors)throw new Error("IP address cannot be empty!");return null}if(!validator.isIP(ipAddress,4)){if(throwErrors)throw new Error("Invalid IP v4 address!");return null}return formattedIPAddress}function formatHostName(hostName,throwErrors){if("string"!=typeof hostName){if(throwErrors)throw new Error("Host name must be a string!");return null}var formattedHostName=hostName.trim().toLowerCase();if(0===formattedHostName.length){if(throwErrors)throw new Error("Host name cannot be empty!");return null}return formattedHostName}function formatHost(host,ipAddress,throwErrors){if("boolean"==typeof ipAddress&&(throwErrors=ipAddress,ipAddress=null),"string"==typeof host){var formattedHostName=formatHostName(host,throwErrors),formattedIPAddress=formatIPV4Address(ipAddress,throwErrors);if(null===formattedHostName){if(throwErrors)throw new Error("Missing host name.");return null}if(null===formattedIPAddress){if(throwErrors)throw new Error("Missing IP address.");return null}return{name:formattedHostName,ipAddress:formattedIPAddress}}if(utilities.isObject(host)){formattedHostName=formatHostName(host.name,throwErrors),formattedIPAddress=null;if(utilities.isValid(host.ipAddress)&&(formattedIPAddress=formatIPV4Address(host.ipAddress,throwErrors)),!utilities.isValid(ipAddress)||utilities.isValid(formattedIPAddress)&&!ip.isPrivate(formattedIPAddress)||(formattedIPAddress=formatIPV4Address(ipAddress,throwErrors)),!utilities.isValid(formattedIPAddress)){if(throwErrors)throw new Error("Missing or invalid IP address.");return null}return{name:formattedHostName,ipAddress:formattedIPAddress}}if(throwErrors)throw new Error("Invalid host datat type: "+typeof host+" - expected string or object.");return null}function parseHosts(data,includeToken,callback){if(utilities.isFunction(includeToken)&&(callback=includeToken,includeToken=null),!utilities.isFunction(callback))throw new Error("Missing callback function!");var formattedIncludeToken=utilities.parseBoolean(includeToken);return null===formattedIncludeToken&&(formattedIncludeToken=!1),async.waterfall([function(callback){(new xml2js.Parser).parseString(data,function(error,jsonData){if(error)return callback(null,null);if(!utilities.isObject(jsonData)||!utilities.isObject(jsonData.xml))return callback(new Error("Invalid XML host data."));var host=null,hosts=jsonData.xml.item,formattedHost=null,formattedHosts=[];if(Array.isArray)for(var i=0;i<hosts.length;i++)formattedHost={name:getValue((host=hosts[i]).host),ipAddress:getValue(host.address)},formattedIncludeToken&&(formattedHost.url=getValue(host.url),formattedHost.token=getToken(host.url)),formattedHosts.push(formattedHost);return callback(null,formattedHosts)})},function(jsonData,callback){if(jsonData)return callback(null,jsonData);if("string"!=typeof data||0===data.length)return callback(null,null);for(var hosts=[],lines=data.split(/\r?\n/g),parts=null,i=0;i<lines.length;i++){if(parts=lines[i].match(/([^|]+)/g),utilities.isEmptyArray(parts)||3!==parts.length)return callback(new Error("Invalid host data on line "+(i+1)+"."));hosts.push({name:parts[0],ipAddress:parts[1],url:parts[2]})}return callback(null,hosts)}],function(error,result){return error?callback(error):callback(null,result)})}freeDNS.setup=function(options){var formattedOptions=utilities.formatObject(options,{key:{type:"string",trim:!0,nonEmpty:!0,nullable:!1},userName:{type:"string",case:"lower",trim:!0,nonEmpty:!0,nullable:!1},password:{type:"string",trim:!0,nonEmpty:!0,nullable:!1}},{throwErrors:!0,removeExtra:!0});if(utilities.isNonEmptyString(formattedOptions.key))apiKey=formattedOptions.key;else{if(utilities.isEmptyString(formattedOptions.userName)||utilities.isEmptyString(formattedOptions.password))throw new Error("Missing FreeDNS API Key and / or user name / password.");apiKey=sha1(formattedOptions.userName+"|"+formattedOptions.password)}},freeDNS.getHosts=function(includeToken,callback){if(utilities.isFunction(includeToken)&&(callback=includeToken,includeToken=null),!utilities.isFunction(callback))throw new Error("Missing callback function!");if(utilities.isEmptyString(apiKey))return callback(new Error("Missing FreeDNS API key."));var formattedIncludeToken=utilities.parseBoolean(includeToken);null===formattedIncludeToken&&(formattedIncludeToken=!1);var query={action:"getdyndns",sha:apiKey};return"ascii"!==interface&&(query.style=interface),envelope.get("api",query,{baseUrl:apiAddress},function(error,result){return error?callback(error):parseHosts(result,formattedIncludeToken,function(error,result){return error?callback(error):callback(null,result)})})},freeDNS.updateHosts=function(data,ipAddress,callback){if(utilities.isFunction(ipAddress)&&(callback=ipAddress,ipAddress=null),!utilities.isFunction(callback))throw new Error("Missing callback function!");if(!utilities.isObject(data))return(error=new Error("Missing or invalid data passed to FreeDNS update function.")).status=400,callback(error);if(utilities.isValid(data.host)&&utilities.isValid(data.hosts))return(error=new Error("Both host and host data attributes specified, please specify one or the other.")).status=400,callback(error);if(utilities.isValid(data.hosts)&&utilities.isEmptyArray(data.hosts))return(error=new Error("Hosts list cannot be empty.")).status=400,callback(error);utilities.isValid(data.ipAddress)&&(ipAddress=data.ipAddress);var host=null,hosts=[];if(utilities.isValid(data.host))try{hosts.push(formatHost(data.host,ipAddress,!0))}catch(error){return error.status=400,callback(error)}if(utilities.isValid(data.hosts))try{for(var i=0;i<data.hosts.length;i++)host=data.hosts[i],hosts.push(formatHost(host,ipAddress,!0))}catch(error){return error.status=400,callback(error)}if(0===hosts.length)return(error=new Error("No host(s) specified!")).status=400,callback(error);var hostData=[];for(i=0;i<hosts.length;i++){var error;if(host=hosts[i],ip.isPrivate(host.ipAddress))return(error=new Error("Cannot use private IP address "+host.ipAddress+" for host: "+host.name+".")).status=400,callback(error);hostData.push({item:[{host:host.name},{address:host.ipAddress}]})}return async.waterfall([function(callback){return freeDNS.getHosts(!0,function(error,currentHosts){return error?callback(error):callback(null,currentHosts)})},function(currentHosts,callback){for(var hostToUpdate=null,currentHost=null,validHostName=null,i=0;i<hosts.length;i++){hostToUpdate=hosts[i],validHostName=!1;for(var j=0;j<currentHosts.length;j++){currentHost=currentHosts[j],hostToUpdate.name===currentHost.name&&(validHostName=!0,hostToUpdate.previousIPAddress=currentHost.ipAddress,hostToUpdate.url=currentHost.url,hostToUpdate.token=currentHost.token,hostToUpdate.updated=!1);break}if(!validHostName){var error=new Error('Host name not found: "'+hostToUpdate.name);return error.status=400,callback(error)}}return async.eachSeries(hosts,function(host,callback){return host.ipAddress===host.previousIPAddress?callback():envelope.post("dynamic/update.php?"+host.token,xml({xml:hostData}),null,{baseUrl:apiAddress,headers:{"Content-Type":"application/xml"}},function(error,result,response){return error?callback(error):(host.updated=200===response.statusCode&&!isError(result),host.message=formatResult(result),callback())})},function(error){return callback(error||null)})}],function(error){return error?callback(error):callback(null,hosts)})},module.exports=freeDNS;